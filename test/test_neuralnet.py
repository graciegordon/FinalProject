#from functions import neural_network
from functions import utils
from functions import neural_network

def test_seqencode():
    #test seq encode
    assert utils.seq_encode(['A','T','C','G']) == ['0001','0010','0100','1000']

def test_sequnencode():
    assert utils.seq_unencode('0001001001001000') == 'ATCG'

def test_reverse_complemet():
    assert utils.reverse_complement('ACTG') == 'CAGT'

def test_shufflePosNegs():
    #test to make sure shuffled tuple is made
    pos
    neg
    print(neural_network.shufflePosNegs(pos,neg))
    assert neural_network.shufflePosNegs(pos,neg) != [('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('1000',1),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0),('0001',0)]



